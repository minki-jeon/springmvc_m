<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://jakarta.ee/xml/ns/jakartaee" xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd" id="WebApp_ID" version="6.0">
  <display-name>springmvc_m</display-name>

  <!-- Creates the Spring Container shared by all Servlets and Filters -->
  <!-- datasource, service, dao 등 Controller와 공유하는 Bean -->
  <listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!-- 
  		[ContextLoaderListener]
  		- WAS 구동 시 web.xml을 읽을 때 초기셋팅작업 해주는 역할
 			(WAS 구동순서 : server.xml -> web.xml -> ~)
  		- 스프링에서 제공하는 클래스 중 하나, ContextLoader와 ServletContextListener를 상속함 
  		- 스프링 설정파일을 읽기 위해 필요
  		- 그래서 context-param 태그로 contextConfigLocation이라는 파라미터(=매개변수=그냥 변수를 만드는거임)에
  		   스프링 설정파일 위치를 지정해준다.
  	-->
  	
  <!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
  <!-- <context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/spring/root-context.xml</param-value>
  </context-param> -->
  <!-- 공통으로 사용할 의존성 설정 파일(applicationContext.xml==root-context.xml)의 위치를 담는 파라미터 -->
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>/WEB-INF/config/applicationContext.xml</param-value>
  </context-param>
  
  <!-- Processes application requests -->
  <!-- <servlet>
	<servlet-name>appServlet</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	<init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
	</init-param>
	<load-on-startup>1</load-on-startup>
  </servlet>
	
  <servlet-mapping>
	<servlet-name>appServlet</servlet-name>
	<url-pattern>/</url-pattern>
  </servlet-mapping> -->
  <!-- DispatcherServlet 생성 (Controller, ViewResolver, hanlderMapping) -->
  <servlet>
  	<!-- 이 서블릿 이름대로 (서블릿이름)-servlet.xml 파일을 DispatcherServlet으로 삼음 -->
  	<servlet-name>dispatcher</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<!-- contextLoader가 아래 위치의 설정 파일을 읽어서 이 파일을 DispatcherServlet으로 만든다. -->
   	<init-param>
   		<param-name>contextConfigLocation</param-name>
   		<param-value>/WEB-INF/config/dispatcher-servlet.xml</param-value>
   	</init-param>
  </servlet>
  <!-- .do로 끝나는 url의 요청을 받아서 DispatcherServlet에서 처리한다. -->
  <servlet-mapping>
  	<servlet-name>dispatcher</servlet-name>
  	<url-pattern>*.do</url-pattern>
  </servlet-mapping>
  
  <!-- Filter 생성 (encodingFilter) -->
  <filter>
	<filter-name>encodingFilter</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	</init-param>
	<!-- <init-param>
		<param-name>forceEncoding</param-name>
		<param-value>true</param-value>
	</init-param> -->
  </filter>
  <filter-mapping>
	<filter-name>encodingFilter</filter-name>
	<!-- <url-pattern>/*</url-pattern> -->
	<url-pattern>*.do</url-pattern>
  </filter-mapping>
 
  <!-- 전달하기 위한 변수
	* <context-param>
	 - 전역변수 지정, 모든 서블릿 사용 가능( = <servlet> 밖에서 독립적으로 쓸 수 있음)
	* <init-param>
	 - 지역변수 지정, 특정 서블릿 사용 가능( = <servlet> 안에서만 쓸 수 있음)
  -->
   
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.jsp</welcome-file>
    <welcome-file>default.htm</welcome-file>
  </welcome-file-list>
</web-app>